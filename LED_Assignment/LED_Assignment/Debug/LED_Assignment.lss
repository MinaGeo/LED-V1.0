
LED_Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000005d4  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  0000066e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000066e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115a  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000903  00000000  00000000  0000193e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a69  00000000  00000000  00002241  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ed  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000940  00000000  00000000  0000342d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003d6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  8a:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint8_t buttonState = LOW;
uint8_t ledState = LOW;
uint8_t BUTTON_PIN = BUTTON_1_PIN;

EN_appError_t APP_init(void) {
  if (LED_init(LED_1_PORT, LED_PIN[0]) != LED_OK) {
  92:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <LED_PIN>
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LED_init>
  9c:	81 11       	cpse	r24, r1
  9e:	1e c0       	rjmp	.+60     	; 0xdc <APP_init+0x4a>
    return APP_LED_ERROR;
  } else if (LED_init(LED_1_PORT, LED_PIN[1]) != LED_OK) {
  a0:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <LED_PIN+0x1>
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LED_init>
  aa:	81 11       	cpse	r24, r1
  ac:	19 c0       	rjmp	.+50     	; 0xe0 <APP_init+0x4e>
    return APP_LED_ERROR;
  } else if (LED_init(LED_1_PORT, LED_PIN[2]) != LED_OK) {
  ae:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <LED_PIN+0x2>
  b2:	81 e4       	ldi	r24, 0x41	; 65
  b4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LED_init>
  b8:	81 11       	cpse	r24, r1
  ba:	14 c0       	rjmp	.+40     	; 0xe4 <APP_init+0x52>
    return APP_LED_ERROR;
  } else if (LED_init(LED_1_PORT, LED_PIN[3]) != LED_OK) {
  bc:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <LED_PIN+0x3>
  c0:	81 e4       	ldi	r24, 0x41	; 65
  c2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LED_init>
  c6:	81 11       	cpse	r24, r1
  c8:	0f c0       	rjmp	.+30     	; 0xe8 <APP_init+0x56>
    return APP_LED_ERROR;
  } else if (BUTTON_init(BUTTON_1_PORT, BUTTON_PIN) != BTN_OK) {
  ca:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	83 e4       	ldi	r24, 0x43	; 67
  d0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <BUTTON_init>
  d4:	88 23       	and	r24, r24
  d6:	51 f0       	breq	.+20     	; 0xec <APP_init+0x5a>
    return APP_BTN_ERROR;
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	08 95       	ret
uint8_t ledState = LOW;
uint8_t BUTTON_PIN = BUTTON_1_PIN;

EN_appError_t APP_init(void) {
  if (LED_init(LED_1_PORT, LED_PIN[0]) != LED_OK) {
    return APP_LED_ERROR;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	08 95       	ret
  } else if (LED_init(LED_1_PORT, LED_PIN[1]) != LED_OK) {
    return APP_LED_ERROR;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	08 95       	ret
  } else if (LED_init(LED_1_PORT, LED_PIN[2]) != LED_OK) {
    return APP_LED_ERROR;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	08 95       	ret
  } else if (LED_init(LED_1_PORT, LED_PIN[3]) != LED_OK) {
    return APP_LED_ERROR;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	08 95       	ret
  } else if (BUTTON_init(BUTTON_1_PORT, BUTTON_PIN) != BTN_OK) {
    return APP_BTN_ERROR;
  } else {
    return APP_OK;
  ec:	80 e0       	ldi	r24, 0x00	; 0
  }

}
  ee:	08 95       	ret

000000f0 <APP_start>:

EN_appError_t APP_start(void) {

  if (LED_read(LED_1_PORT, LED_PIN[currentLed], & ledState) != LED_OK) {
  f0:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <currentLed>
  f4:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <currentLed+0x1>
  f8:	ef 59       	subi	r30, 0x9F	; 159
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	46 e6       	ldi	r20, 0x66	; 102
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	60 81       	ld	r22, Z
 102:	81 e4       	ldi	r24, 0x41	; 65
 104:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LED_read>
 108:	81 11       	cpse	r24, r1
 10a:	57 c0       	rjmp	.+174    	; 0x1ba <APP_start+0xca>
    return APP_LED_ERROR;
  }
  if (BUTTON_read(BUTTON_1_PORT, BUTTON_PIN, & buttonState) != BTN_OK) {
 10c:	47 e6       	ldi	r20, 0x67	; 103
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 114:	83 e4       	ldi	r24, 0x43	; 67
 116:	0e 94 ed 00 	call	0x1da	; 0x1da <BUTTON_read>
 11a:	81 11       	cpse	r24, r1
 11c:	50 c0       	rjmp	.+160    	; 0x1be <APP_start+0xce>
    return APP_BTN_ERROR;
  }

  if (buttonState == HIGH) {
 11e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <buttonState>
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	09 f0       	breq	.+2      	; 0x128 <APP_start+0x38>
 126:	4d c0       	rjmp	.+154    	; 0x1c2 <APP_start+0xd2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f e5       	ldi	r18, 0x5F	; 95
 12a:	8a ee       	ldi	r24, 0xEA	; 234
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <APP_start+0x3e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <APP_start+0x48>
 138:	00 00       	nop
    _delay_ms(300);
    if (ledState == LOW) {
 13a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 13e:	81 11       	cpse	r24, r1
 140:	1f c0       	rjmp	.+62     	; 0x180 <APP_start+0x90>
     
      if (LED_on(LED_1_PORT, LED_PIN[currentLed]) != LED_OK) {
 142:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <currentLed>
 146:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <currentLed+0x1>
 14a:	ef 59       	subi	r30, 0x9F	; 159
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	60 81       	ld	r22, Z
 150:	81 e4       	ldi	r24, 0x41	; 65
 152:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LED_on>
 156:	81 11       	cpse	r24, r1
 158:	36 c0       	rjmp	.+108    	; 0x1c6 <APP_start+0xd6>

        return APP_LED_ERROR;
      } else {
        currentLed = (currentLed + 1) % 4; // Move to the next LED in a cyclic manner
 15a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <currentLed>
 15e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <currentLed+0x1>
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	83 70       	andi	r24, 0x03	; 3
 166:	90 78       	andi	r25, 0x80	; 128
 168:	99 23       	and	r25, r25
 16a:	24 f4       	brge	.+8      	; 0x174 <APP_start+0x84>
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	8c 6f       	ori	r24, 0xFC	; 252
 170:	9f 6f       	ori	r25, 0xFF	; 255
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <currentLed+0x1>
 178:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <currentLed>

        return APP_OK;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret

      }
    } else if (ledState == HIGH) {
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	19 f5       	brne	.+70     	; 0x1ca <APP_start+0xda>

      if (LED_off(LED_1_PORT, LED_PIN[currentLed]) != LED_OK) {
 184:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <currentLed>
 188:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <currentLed+0x1>
 18c:	ef 59       	subi	r30, 0x9F	; 159
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	60 81       	ld	r22, Z
 192:	81 e4       	ldi	r24, 0x41	; 65
 194:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LED_off>
 198:	81 11       	cpse	r24, r1
 19a:	19 c0       	rjmp	.+50     	; 0x1ce <APP_start+0xde>

        return APP_LED_ERROR;
      } else {
        currentLed = (currentLed + 1) % 4; // Move to the next LED in a cyclic manner
 19c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <currentLed>
 1a0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <currentLed+0x1>
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	64 e0       	ldi	r22, 0x04	; 4
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 c0 02 	call	0x580	; 0x580 <__divmodhi4>
 1ae:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <currentLed+0x1>
 1b2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <currentLed>

        return APP_OK;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 95       	ret
}

EN_appError_t APP_start(void) {

  if (LED_read(LED_1_PORT, LED_PIN[currentLed], & ledState) != LED_OK) {
    return APP_LED_ERROR;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	08 95       	ret
  }
  if (BUTTON_read(BUTTON_1_PORT, BUTTON_PIN, & buttonState) != BTN_OK) {
    return APP_BTN_ERROR;
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	08 95       	ret
    } else {
      return APP_ERROR_EXIT;
    }

  } else {
    return APP_ERROR_EXIT;
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	08 95       	ret
    _delay_ms(300);
    if (ledState == LOW) {
     
      if (LED_on(LED_1_PORT, LED_PIN[currentLed]) != LED_OK) {

        return APP_LED_ERROR;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret
        return APP_OK;

      }

    } else {
      return APP_ERROR_EXIT;
 1ca:	84 e0       	ldi	r24, 0x04	; 4
 1cc:	08 95       	ret
      }
    } else if (ledState == HIGH) {

      if (LED_off(LED_1_PORT, LED_PIN[currentLed]) != LED_OK) {

        return APP_LED_ERROR;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
  } else {
    return APP_ERROR_EXIT;

  }

}
 1d0:	08 95       	ret

000001d2 <BUTTON_init>:
 */ 

#include "button.h"
EN_btnError_t BUTTON_init(uint8_t buttonPort,uint8_t buttonPin)
{
	return(DIO_init(buttonPort,buttonPin,IN));
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_init>
	
}
 1d8:	08 95       	ret

000001da <BUTTON_read>:
EN_btnError_t BUTTON_read(uint8_t buttonPort,uint8_t buttonPin,uint8_t* value)
{
	return(DIO_read(buttonPort,buttonPin,value));
 1da:	0e 94 51 02 	call	0x4a2	; 0x4a2 <DIO_read>
}
 1de:	08 95       	ret

000001e0 <LED_init>:
EN_ledError_t LED_off(uint8_t ledPort,uint8_t ledPin){
	return(DIO_write(ledPort,ledPin,LOW));
}
EN_ledError_t LED_toggle(uint8_t ledPort,uint8_t ledPin){
	return(DIO_toggle(ledPort,ledPin));
}
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	0e 94 76 01 	call	0x2ec	; 0x2ec <DIO_init>
 1e6:	08 95       	ret

000001e8 <LED_on>:
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_write>
 1ee:	08 95       	ret

000001f0 <LED_off>:
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	0e 94 bf 01 	call	0x37e	; 0x37e <DIO_write>
 1f6:	08 95       	ret

000001f8 <LED_read>:
EN_ledError_t LED_read(uint8_t ledPort,uint8_t ledPin,uint8_t* value){
	return(DIO_read(ledPort,ledPin,value));
 1f8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <DIO_read>
}
 1fc:	08 95       	ret

000001fe <main>:
  
	//test_dio();
	//test_app();
	
	
	APP_init();
 1fe:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	while (1)
	{
		APP_start();
 202:	0e 94 78 00 	call	0xf0	; 0xf0 <APP_start>
 206:	fd cf       	rjmp	.-6      	; 0x202 <main+0x4>

00000208 <CLEAR_BIT>:
// function defintions
#include "dio.h"


void CLEAR_BIT(uint8_t portNumber,uint8_t pinNumber){
	switch(portNumber){
 208:	82 34       	cpi	r24, 0x42	; 66
 20a:	a9 f0       	breq	.+42     	; 0x236 <CLEAR_BIT+0x2e>
 20c:	18 f4       	brcc	.+6      	; 0x214 <CLEAR_BIT+0xc>
 20e:	81 34       	cpi	r24, 0x41	; 65
 210:	31 f0       	breq	.+12     	; 0x21e <CLEAR_BIT+0x16>
 212:	08 95       	ret
 214:	83 34       	cpi	r24, 0x43	; 67
 216:	d9 f0       	breq	.+54     	; 0x24e <CLEAR_BIT+0x46>
 218:	84 34       	cpi	r24, 0x44	; 68
 21a:	29 f1       	breq	.+74     	; 0x266 <CLEAR_BIT+0x5e>
 21c:	08 95       	ret
		case 'A':{
			DDRA&=~(1<<pinNumber);
 21e:	2a b3       	in	r18, 0x1a	; 26
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <CLEAR_BIT+0x22>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <CLEAR_BIT+0x1e>
 22e:	80 95       	com	r24
 230:	82 23       	and	r24, r18
 232:	8a bb       	out	0x1a, r24	; 26
			break;
 234:	08 95       	ret
		}
		
		case 'B':{
			DDRB&=~(1<<pinNumber);
 236:	27 b3       	in	r18, 0x17	; 23
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <CLEAR_BIT+0x3a>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <CLEAR_BIT+0x36>
 246:	80 95       	com	r24
 248:	82 23       	and	r24, r18
 24a:	87 bb       	out	0x17, r24	; 23
			break;
 24c:	08 95       	ret
		}
		case 'C':{
			DDRC&=~(1<<pinNumber);
 24e:	24 b3       	in	r18, 0x14	; 20
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <CLEAR_BIT+0x52>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <CLEAR_BIT+0x4e>
 25e:	80 95       	com	r24
 260:	82 23       	and	r24, r18
 262:	84 bb       	out	0x14, r24	; 20
			break;
 264:	08 95       	ret
		}
		case 'D':{
			DDRD&=~(1<<pinNumber);
 266:	21 b3       	in	r18, 0x11	; 17
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <CLEAR_BIT+0x6a>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <CLEAR_BIT+0x66>
 276:	80 95       	com	r24
 278:	82 23       	and	r24, r18
 27a:	81 bb       	out	0x11, r24	; 17
 27c:	08 95       	ret

0000027e <SET_BIT>:
			break;
		}
	}
}
void SET_BIT(uint8_t portNumber,uint8_t pinNumber){
		switch(portNumber){
 27e:	82 34       	cpi	r24, 0x42	; 66
 280:	a1 f0       	breq	.+40     	; 0x2aa <SET_BIT+0x2c>
 282:	18 f4       	brcc	.+6      	; 0x28a <SET_BIT+0xc>
 284:	81 34       	cpi	r24, 0x41	; 65
 286:	31 f0       	breq	.+12     	; 0x294 <SET_BIT+0x16>
 288:	08 95       	ret
 28a:	83 34       	cpi	r24, 0x43	; 67
 28c:	c9 f0       	breq	.+50     	; 0x2c0 <SET_BIT+0x42>
 28e:	84 34       	cpi	r24, 0x44	; 68
 290:	11 f1       	breq	.+68     	; 0x2d6 <SET_BIT+0x58>
 292:	08 95       	ret
			case 'A':{
				DDRA|=(1<<pinNumber);
 294:	2a b3       	in	r18, 0x1a	; 26
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <SET_BIT+0x22>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <SET_BIT+0x1e>
 2a4:	82 2b       	or	r24, r18
 2a6:	8a bb       	out	0x1a, r24	; 26
				break;
 2a8:	08 95       	ret
			}
			
			case 'B':{
				DDRB|=(1<<pinNumber);
 2aa:	27 b3       	in	r18, 0x17	; 23
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <SET_BIT+0x38>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <SET_BIT+0x34>
 2ba:	82 2b       	or	r24, r18
 2bc:	87 bb       	out	0x17, r24	; 23
				break;
 2be:	08 95       	ret
			}
			case 'C':{
				DDRC|=(1<<pinNumber);
 2c0:	24 b3       	in	r18, 0x14	; 20
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <SET_BIT+0x4e>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <SET_BIT+0x4a>
 2d0:	82 2b       	or	r24, r18
 2d2:	84 bb       	out	0x14, r24	; 20
				break;
 2d4:	08 95       	ret
			}
			case 'D':{
				DDRD|=(1<<pinNumber);
 2d6:	21 b3       	in	r18, 0x11	; 17
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <SET_BIT+0x64>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <SET_BIT+0x60>
 2e6:	82 2b       	or	r24, r18
 2e8:	81 bb       	out	0x11, r24	; 17
 2ea:	08 95       	ret

000002ec <DIO_init>:
		}
	}

EN_dioError_t DIO_init(uint8_t portNumber,uint8_t pinNumber,uint8_t direction)
{
		if(pinNumber>7||pinNumber<0)
 2ec:	68 30       	cpi	r22, 0x08	; 8
 2ee:	d8 f5       	brcc	.+118    	; 0x366 <DIO_init+0x7a>
		{
		return DIO_INVALID_PIN;
		}
		
	switch(portNumber){
 2f0:	82 34       	cpi	r24, 0x42	; 66
 2f2:	a9 f0       	breq	.+42     	; 0x31e <DIO_init+0x32>
 2f4:	18 f4       	brcc	.+6      	; 0x2fc <DIO_init+0x10>
 2f6:	81 34       	cpi	r24, 0x41	; 65
 2f8:	31 f0       	breq	.+12     	; 0x306 <DIO_init+0x1a>
 2fa:	37 c0       	rjmp	.+110    	; 0x36a <DIO_init+0x7e>
 2fc:	83 34       	cpi	r24, 0x43	; 67
 2fe:	d9 f0       	breq	.+54     	; 0x336 <DIO_init+0x4a>
 300:	84 34       	cpi	r24, 0x44	; 68
 302:	29 f1       	breq	.+74     	; 0x34e <DIO_init+0x62>
 304:	32 c0       	rjmp	.+100    	; 0x36a <DIO_init+0x7e>
		case PORT_A:
		{
			if(direction == IN){
 306:	41 11       	cpse	r20, r1
 308:	04 c0       	rjmp	.+8      	; 0x312 <DIO_init+0x26>
				CLEAR_BIT(portNumber,pinNumber);
 30a:	0e 94 04 01 	call	0x208	; 0x208 <CLEAR_BIT>
				return DIO_OK;
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	08 95       	ret
			}
			else if(direction == OUT){
 312:	41 30       	cpi	r20, 0x01	; 1
 314:	61 f5       	brne	.+88     	; 0x36e <DIO_init+0x82>
				SET_BIT(portNumber,pinNumber);
 316:	0e 94 3f 01 	call	0x27e	; 0x27e <SET_BIT>
				return DIO_OK;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	08 95       	ret
			break;
		}
		
		case PORT_B:
		{
			if(direction==IN){
 31e:	41 11       	cpse	r20, r1
 320:	04 c0       	rjmp	.+8      	; 0x32a <DIO_init+0x3e>
				CLEAR_BIT(portNumber,pinNumber);
 322:	0e 94 04 01 	call	0x208	; 0x208 <CLEAR_BIT>
				        return DIO_OK;
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	08 95       	ret
				        
			}
			else if(direction==OUT){
 32a:	41 30       	cpi	r20, 0x01	; 1
 32c:	11 f5       	brne	.+68     	; 0x372 <DIO_init+0x86>
				SET_BIT(portNumber,pinNumber);
 32e:	0e 94 3f 01 	call	0x27e	; 0x27e <SET_BIT>
				        return DIO_OK;
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	08 95       	ret
			break;
		}
		
		case PORT_C:
		{
			if(direction==IN){
 336:	41 11       	cpse	r20, r1
 338:	04 c0       	rjmp	.+8      	; 0x342 <DIO_init+0x56>
				CLEAR_BIT(portNumber,pinNumber);
 33a:	0e 94 04 01 	call	0x208	; 0x208 <CLEAR_BIT>
				        return DIO_OK;
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
				        
			}
			else if(direction==OUT){
 342:	41 30       	cpi	r20, 0x01	; 1
 344:	c1 f4       	brne	.+48     	; 0x376 <DIO_init+0x8a>
				SET_BIT(portNumber,pinNumber);
 346:	0e 94 3f 01 	call	0x27e	; 0x27e <SET_BIT>
				        return DIO_OK;
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	08 95       	ret
			break;
		}
		
		case PORT_D:
		{
			if(direction==IN){
 34e:	41 11       	cpse	r20, r1
 350:	04 c0       	rjmp	.+8      	; 0x35a <DIO_init+0x6e>
				CLEAR_BIT(portNumber,pinNumber);
 352:	0e 94 04 01 	call	0x208	; 0x208 <CLEAR_BIT>
		}
		default:{
			return DIO_INVALID_PORT;
		}	
	}
			return DIO_INVALID_PORT;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	08 95       	ret
		case PORT_D:
		{
			if(direction==IN){
				CLEAR_BIT(portNumber,pinNumber);
			}
			else if(direction==OUT){
 35a:	41 30       	cpi	r20, 0x01	; 1
 35c:	71 f4       	brne	.+28     	; 0x37a <DIO_init+0x8e>
				SET_BIT(portNumber,pinNumber);
 35e:	0e 94 3f 01 	call	0x27e	; 0x27e <SET_BIT>
				        return DIO_OK;
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	08 95       	ret

EN_dioError_t DIO_init(uint8_t portNumber,uint8_t pinNumber,uint8_t direction)
{
		if(pinNumber>7||pinNumber<0)
		{
		return DIO_INVALID_PIN;
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	08 95       	ret
				return DIO_INVALID_INIT;
			}
			break;
		}
		default:{
			return DIO_INVALID_PORT;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	08 95       	ret
			else if(direction == OUT){
				SET_BIT(portNumber,pinNumber);
				return DIO_OK;
			}
			else{
				return DIO_INVALID_INIT;
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	08 95       	ret
				SET_BIT(portNumber,pinNumber);
				        return DIO_OK;
				        
			}
			else{
				return DIO_INVALID_INIT;
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	08 95       	ret
				SET_BIT(portNumber,pinNumber);
				        return DIO_OK;
				        
			}
			else{
				return DIO_INVALID_INIT;
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	08 95       	ret
			else if(direction==OUT){
				SET_BIT(portNumber,pinNumber);
				        return DIO_OK;
			}
			else{
				return DIO_INVALID_INIT;
 37a:	83 e0       	ldi	r24, 0x03	; 3
			return DIO_INVALID_PORT;
		}	
	}
			return DIO_INVALID_PORT;
			
}
 37c:	08 95       	ret

0000037e <DIO_write>:

EN_dioError_t DIO_write(uint8_t portNumber,uint8_t pinNumber,uint8_t value){
	if(pinNumber>7||pinNumber<0)
 37e:	68 30       	cpi	r22, 0x08	; 8
 380:	08 f0       	brcs	.+2      	; 0x384 <DIO_write+0x6>
 382:	83 c0       	rjmp	.+262    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
	{
		return DIO_INVALID_PIN;

	}
	switch(portNumber)
 384:	82 34       	cpi	r24, 0x42	; 66
 386:	49 f1       	breq	.+82     	; 0x3da <DIO_write+0x5c>
 388:	18 f4       	brcc	.+6      	; 0x390 <DIO_write+0x12>
 38a:	81 34       	cpi	r24, 0x41	; 65
 38c:	41 f0       	breq	.+16     	; 0x39e <DIO_write+0x20>
 38e:	7f c0       	rjmp	.+254    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 390:	83 34       	cpi	r24, 0x43	; 67
 392:	09 f4       	brne	.+2      	; 0x396 <DIO_write+0x18>
 394:	40 c0       	rjmp	.+128    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 396:	84 34       	cpi	r24, 0x44	; 68
 398:	09 f4       	brne	.+2      	; 0x39c <DIO_write+0x1e>
 39a:	5a c0       	rjmp	.+180    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 39c:	78 c0       	rjmp	.+240    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
	{
		case PORT_A:{
			if(value==LOW){
 39e:	41 11       	cpse	r20, r1
 3a0:	0d c0       	rjmp	.+26     	; 0x3bc <DIO_write+0x3e>
				PORTA&=~(1<<pinNumber); 
 3a2:	2b b3       	in	r18, 0x1b	; 27
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_write+0x30>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_write+0x2c>
 3b2:	80 95       	com	r24
 3b4:	82 23       	and	r24, r18
 3b6:	8b bb       	out	0x1b, r24	; 27
			 return DIO_OK;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	08 95       	ret
			}
			else if(value==HIGH){
 3bc:	41 30       	cpi	r20, 0x01	; 1
 3be:	09 f0       	breq	.+2      	; 0x3c2 <DIO_write+0x44>
 3c0:	68 c0       	rjmp	.+208    	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
				PORTA|=(1<<pinNumber);
 3c2:	2b b3       	in	r18, 0x1b	; 27
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_write+0x50>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	6a 95       	dec	r22
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_write+0x4c>
 3d2:	82 2b       	or	r24, r18
 3d4:	8b bb       	out	0x1b, r24	; 27
			 return DIO_OK;
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	08 95       	ret
			}
			break;
		}
		
		case PORT_B:{
			if(value==LOW){
 3da:	41 11       	cpse	r20, r1
 3dc:	0d c0       	rjmp	.+26     	; 0x3f8 <DIO_write+0x7a>
				PORTB&=~(1<<pinNumber);
 3de:	28 b3       	in	r18, 0x18	; 24
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_write+0x6c>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_write+0x68>
 3ee:	80 95       	com	r24
 3f0:	82 23       	and	r24, r18
 3f2:	88 bb       	out	0x18, r24	; 24
			 return DIO_OK;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	08 95       	ret
			 
			}
			else if(value==HIGH){
 3f8:	41 30       	cpi	r20, 0x01	; 1
 3fa:	09 f0       	breq	.+2      	; 0x3fe <DIO_write+0x80>
 3fc:	4c c0       	rjmp	.+152    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
				PORTB|=(1<<pinNumber);
 3fe:	28 b3       	in	r18, 0x18	; 24
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	82 2b       	or	r24, r18
 410:	88 bb       	out	0x18, r24	; 24
			 return DIO_OK;
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	08 95       	ret
			}
			break;
		}
		
		case PORT_C:{
			if(value==LOW){
 416:	41 11       	cpse	r20, r1
 418:	0d c0       	rjmp	.+26     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
				PORTC&=~(1<<pinNumber);
 41a:	25 b3       	in	r18, 0x15	; 21
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	6a 95       	dec	r22
 428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	80 95       	com	r24
 42c:	82 23       	and	r24, r18
 42e:	85 bb       	out	0x15, r24	; 21
			 return DIO_OK;
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	08 95       	ret
			 
			}
			else if(value==HIGH){
 434:	41 30       	cpi	r20, 0x01	; 1
 436:	89 f5       	brne	.+98     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
				PORTC|=(1<<pinNumber);
 438:	25 b3       	in	r18, 0x15	; 21
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	82 2b       	or	r24, r18
 44a:	85 bb       	out	0x15, r24	; 21
			 return DIO_OK;
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	08 95       	ret
			}
			break;
		}
		
		case PORT_D:{
			if(value == LOW)
 450:	41 11       	cpse	r20, r1
 452:	0d c0       	rjmp	.+26     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			{
				PORTD&=~(1<<pinNumber);
 454:	22 b3       	in	r18, 0x12	; 18
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 464:	80 95       	com	r24
 466:	82 23       	and	r24, r18
 468:	82 bb       	out	0x12, r24	; 18
			 return DIO_OK;
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	08 95       	ret
			 
			}
			else if(value == HIGH)
 46e:	41 30       	cpi	r20, 0x01	; 1
 470:	b1 f4       	brne	.+44     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			{
			PORTD|=(1<<pinNumber);
 472:	22 b3       	in	r18, 0x12	; 18
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	82 2b       	or	r24, r18
 484:	82 bb       	out	0x12, r24	; 18
			return DIO_OK;
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	08 95       	ret
}

EN_dioError_t DIO_write(uint8_t portNumber,uint8_t pinNumber,uint8_t value){
	if(pinNumber>7||pinNumber<0)
	{
		return DIO_INVALID_PIN;
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	08 95       	ret
				return DIO_INVALID_VALUE;
			}
			break;
		}
		default:{
			return DIO_INVALID_PORT;
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	08 95       	ret
				PORTA|=(1<<pinNumber);
			 return DIO_OK;
			 
			}
			else{
				return DIO_INVALID_VALUE;
 492:	84 e0       	ldi	r24, 0x04	; 4
 494:	08 95       	ret
				PORTB|=(1<<pinNumber);
			 return DIO_OK;
			 
			}
			else{
				return DIO_INVALID_VALUE;
 496:	84 e0       	ldi	r24, 0x04	; 4
 498:	08 95       	ret
				PORTC|=(1<<pinNumber);
			 return DIO_OK;
			 
			}
			else{
				return DIO_INVALID_VALUE;
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	08 95       	ret
			{
			PORTD|=(1<<pinNumber);
			return DIO_OK;
			}
			else{
				return DIO_INVALID_VALUE;
 49e:	84 e0       	ldi	r24, 0x04	; 4
		}
		default:{
			return DIO_INVALID_PORT;
		}
	}
}
 4a0:	08 95       	ret

000004a2 <DIO_read>:

EN_dioError_t DIO_read(uint8_t portNumber,uint8_t pinNumber,uint8_t* value){

		if(pinNumber>7||pinNumber<0)
 4a2:	68 30       	cpi	r22, 0x08	; 8
 4a4:	08 f0       	brcs	.+2      	; 0x4a8 <DIO_read+0x6>
 4a6:	68 c0       	rjmp	.+208    	; 0x578 <DIO_read+0xd6>
		{
			return DIO_INVALID_PIN;

		}
	switch(portNumber){
 4a8:	82 34       	cpi	r24, 0x42	; 66
 4aa:	09 f1       	breq	.+66     	; 0x4ee <DIO_read+0x4c>
 4ac:	18 f4       	brcc	.+6      	; 0x4b4 <DIO_read+0x12>
 4ae:	81 34       	cpi	r24, 0x41	; 65
 4b0:	39 f0       	breq	.+14     	; 0x4c0 <DIO_read+0x1e>
 4b2:	64 c0       	rjmp	.+200    	; 0x57c <DIO_read+0xda>
 4b4:	83 34       	cpi	r24, 0x43	; 67
 4b6:	91 f1       	breq	.+100    	; 0x51c <DIO_read+0x7a>
 4b8:	84 34       	cpi	r24, 0x44	; 68
 4ba:	09 f4       	brne	.+2      	; 0x4be <DIO_read+0x1c>
 4bc:	46 c0       	rjmp	.+140    	; 0x54a <DIO_read+0xa8>
 4be:	5e c0       	rjmp	.+188    	; 0x57c <DIO_read+0xda>
		case PORT_A:{
			*value= (PINA & (1<<pinNumber)) >> pinNumber;
 4c0:	79 b3       	in	r23, 0x19	; 25
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	9c 01       	movw	r18, r24
 4c8:	06 2e       	mov	r0, r22
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_read+0x2e>
 4cc:	22 0f       	add	r18, r18
 4ce:	33 1f       	adc	r19, r19
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_read+0x2a>
 4d4:	87 2f       	mov	r24, r23
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	82 23       	and	r24, r18
 4da:	93 23       	and	r25, r19
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_read+0x40>
 4de:	95 95       	asr	r25
 4e0:	87 95       	ror	r24
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_read+0x3c>
 4e6:	fa 01       	movw	r30, r20
 4e8:	80 83       	st	Z, r24
			return DIO_OK;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	08 95       	ret
		}
		case PORT_B:{
			*value= (PINB & (1<<pinNumber)) >> pinNumber;
 4ee:	76 b3       	in	r23, 0x16	; 22
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	9c 01       	movw	r18, r24
 4f6:	06 2e       	mov	r0, r22
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_read+0x5c>
 4fa:	22 0f       	add	r18, r18
 4fc:	33 1f       	adc	r19, r19
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_read+0x58>
 502:	87 2f       	mov	r24, r23
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	82 23       	and	r24, r18
 508:	93 23       	and	r25, r19
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_read+0x6e>
 50c:	95 95       	asr	r25
 50e:	87 95       	ror	r24
 510:	6a 95       	dec	r22
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_read+0x6a>
 514:	fa 01       	movw	r30, r20
 516:	80 83       	st	Z, r24
			return DIO_OK;
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	08 95       	ret
			
		}
		case PORT_C:{
			*value= (PINC & (1<<pinNumber)) >> pinNumber;
 51c:	73 b3       	in	r23, 0x13	; 19
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	9c 01       	movw	r18, r24
 524:	06 2e       	mov	r0, r22
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_read+0x8a>
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	0a 94       	dec	r0
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_read+0x86>
 530:	87 2f       	mov	r24, r23
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	82 23       	and	r24, r18
 536:	93 23       	and	r25, r19
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_read+0x9c>
 53a:	95 95       	asr	r25
 53c:	87 95       	ror	r24
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_read+0x98>
 542:	fa 01       	movw	r30, r20
 544:	80 83       	st	Z, r24
			return DIO_OK;
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	08 95       	ret
			
		}
		case PORT_D:{
			*value= (PIND & (1<<pinNumber)) >> pinNumber;
 54a:	70 b3       	in	r23, 0x10	; 16
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	9c 01       	movw	r18, r24
 552:	06 2e       	mov	r0, r22
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_read+0xb8>
 556:	22 0f       	add	r18, r18
 558:	33 1f       	adc	r19, r19
 55a:	0a 94       	dec	r0
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_read+0xb4>
 55e:	87 2f       	mov	r24, r23
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	82 23       	and	r24, r18
 564:	93 23       	and	r25, r19
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_read+0xca>
 568:	95 95       	asr	r25
 56a:	87 95       	ror	r24
 56c:	6a 95       	dec	r22
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_read+0xc6>
 570:	fa 01       	movw	r30, r20
 572:	80 83       	st	Z, r24
			return DIO_OK;
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	08 95       	ret

EN_dioError_t DIO_read(uint8_t portNumber,uint8_t pinNumber,uint8_t* value){

		if(pinNumber>7||pinNumber<0)
		{
			return DIO_INVALID_PIN;
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	08 95       	ret
			*value= (PIND & (1<<pinNumber)) >> pinNumber;
			return DIO_OK;
			
		}
		default:{
			return DIO_INVALID_PORT;
 57c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
 57e:	08 95       	ret

00000580 <__divmodhi4>:
 580:	97 fb       	bst	r25, 7
 582:	07 2e       	mov	r0, r23
 584:	16 f4       	brtc	.+4      	; 0x58a <__divmodhi4+0xa>
 586:	00 94       	com	r0
 588:	07 d0       	rcall	.+14     	; 0x598 <__divmodhi4_neg1>
 58a:	77 fd       	sbrc	r23, 7
 58c:	09 d0       	rcall	.+18     	; 0x5a0 <__divmodhi4_neg2>
 58e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__udivmodhi4>
 592:	07 fc       	sbrc	r0, 7
 594:	05 d0       	rcall	.+10     	; 0x5a0 <__divmodhi4_neg2>
 596:	3e f4       	brtc	.+14     	; 0x5a6 <__divmodhi4_exit>

00000598 <__divmodhi4_neg1>:
 598:	90 95       	com	r25
 59a:	81 95       	neg	r24
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	08 95       	ret

000005a0 <__divmodhi4_neg2>:
 5a0:	70 95       	com	r23
 5a2:	61 95       	neg	r22
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255

000005a6 <__divmodhi4_exit>:
 5a6:	08 95       	ret

000005a8 <__udivmodhi4>:
 5a8:	aa 1b       	sub	r26, r26
 5aa:	bb 1b       	sub	r27, r27
 5ac:	51 e1       	ldi	r21, 0x11	; 17
 5ae:	07 c0       	rjmp	.+14     	; 0x5be <__udivmodhi4_ep>

000005b0 <__udivmodhi4_loop>:
 5b0:	aa 1f       	adc	r26, r26
 5b2:	bb 1f       	adc	r27, r27
 5b4:	a6 17       	cp	r26, r22
 5b6:	b7 07       	cpc	r27, r23
 5b8:	10 f0       	brcs	.+4      	; 0x5be <__udivmodhi4_ep>
 5ba:	a6 1b       	sub	r26, r22
 5bc:	b7 0b       	sbc	r27, r23

000005be <__udivmodhi4_ep>:
 5be:	88 1f       	adc	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	5a 95       	dec	r21
 5c4:	a9 f7       	brne	.-22     	; 0x5b0 <__udivmodhi4_loop>
 5c6:	80 95       	com	r24
 5c8:	90 95       	com	r25
 5ca:	bc 01       	movw	r22, r24
 5cc:	cd 01       	movw	r24, r26
 5ce:	08 95       	ret

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
